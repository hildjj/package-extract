#!/usr/bin/env node
/* eslint-disable no-console */

import {Command, InvalidArgumentError} from 'commander'
import {EOL} from 'os'
import {findRoot} from '../lib/findRoot.js'
import fs from 'fs/promises'
import {stringify} from '../lib/stringify.js'
import {version} from '../package.js'

function myParseInt(value, dummyPrevious) {
  const parsedValue = parseInt(value, 10)
  if (isNaN(parsedValue)) {
    throw new InvalidArgumentError('Not a number.')
  }
  return parsedValue
}

const program = new Command()
program
  .argument('[fields...]', 'fields to extract from package file', ['version'])
  .option('-d, --double', 'use double quotes')
  .option('-i, --indent <number>', 'number of spaces to indent. -1 for tab. 0 for no newlines.', myParseInt, 2)
  .option('-o, --output <filename>', 'name of output file, relative to package.json.  Use "-" for stdout.', 'package.js')
  .option('-p, --package', 'package file to extract from, found from cwd, searching up', 'package.json')
  .option('-s, --semi', 'add semicolons to the end of each variable')
  .option('-t, --trailing', 'Add trailing commas')
  .version(version)

program.parse()
const args = program.args.length ? program.args : ['version']
const opts = program.opts()
const strOpts = {
  trailing: opts.trailing,
  indent: opts.indent < 0 ? '\t'.repeat(-opts.indent) : ' '.repeat(opts.indent || 1),
  quote: opts.double ? '"' : '\'',
  newline: opts.indent === 0 ? '' : EOL,
}

async function main() {
  const pkg = await findRoot(process.cwd(), opts.package)
  const props = JSON.parse(await fs.readFile(pkg))
  let out = `// Generated by package-extract v${version}\n// Do not modify by hand.\n\n`
  for (const field of args) {
    if (props[field] == null) {
      throw new Error(`Property "${field}" not found in "${pkg}"`)
    }
    out += `export const ${field} = ${stringify(props[field], strOpts)}${opts.semi ? ';' : ''}\n`
  }
  if (opts.output === '-') {
    console.log(out)
  } else {
    await fs.writeFile(opts.output, out, 'utf8')
  }
}

main().catch(er => {
  console.error(er.message)
  process.exit(1)
})
